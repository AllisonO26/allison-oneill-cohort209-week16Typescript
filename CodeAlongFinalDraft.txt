//Interface
//IPizza with required and optional properties
/* 
interface IPizza {
    name: string;
    slices: number;
    toppings: string;
    price: number;
    cheesecrust: boolean;
    vegan?: boolean;
    vegetarian?: boolean;
}
*/
/*
const Pizza: IPizza = {
    name: 'BBQ',
    slices: 6,
    toppings: 'tomatosauce, BBQ sauce',
    price: 15,
    cheesecrust: true
}
*/
/*
interface IPizza {
	name: string;
	slices: number;
	toppings: string[];
	price: number;
	cheesecrust: boolean;
	sizes: number[];
	vegan?: boolean;
	vegaterian?: boolean;
}
*/
/*
const Pizza: IPizza = {
    name: 'Hawaiian',
    slices: 6,
    toppings: ['Pineapple', 'Ham', 'Tomatosauce'],
    price: 15,
    cheesecrust: true,
    vegan: false,
    sizes: [0, 1, 2, 3, 4]
}
*/
//const pizzaArray: IPizza[] = []

enum PizzaToppings {
    TOMATO, 
    BBQ,
    NONE,
    CREAMY
}


enum PizzaSizes {
    S = 's',
    M = 'm',
    L = 'l',
    XL = 'xl',
    XXL = 'xxl'  
}

// IPizza properties with an enum.
/*
interface IPizza {
    name: string;
    slices: number;
    toppings: PizzaToppings[];
    price: number;
    cheescrust: boolean;
    sizes: PizzaSizes[];
    vegan?: boolean;
    vegaterian?: boolean;
}
*/
/*
const pizza: IPizza = {
    name: 'BBQ',
    slices: 6,
    toppings: [PizzaToppings.TOMATO, PizzaToppings.BBQ],
    price: 15,
    cheescrust: true,
    vegan: false,
    sizes: [PizzaSizes.S, PizzaSizes.M, PizzaSizes.L, PizzaSizes.XL]
}
*/
/*
//Classes
class Pizza {
    name: string = '';
    slices: number = 8;
    toppings: PizzaToppings[] = [];
    price: number = 0;
    cheescrust: boolean = false;
    sizes: PizzaSizes[] = [];
    vegan?: boolean = false;
    vegaterian?: boolean = false;

    constructor(data: IPizza) {
        this.name = data.name;
        this.slices = data.slices;
        this.toppings = data.toppings;
        this.price = data.price;
        this.cheescrust = data.cheescrust;
        this.sizes = data.sizes;

        if(data.vegan) {
            this.vegan = data.vegan;
        }
        if(data.vegaterian) {
            this.vegaterian = data.vegaterian;
        }
     }
}
*/
/*
const BBQpizza: IPizza = {
    name: 'BBQ',
    slices: 6,
    toppings: [PizzaToppings.TOMATO, PizzaToppings.BBQ],
    price: 15,
    cheescrust: true,
    vegan: false,
    sizes: [PizzaSizes.S, PizzaSizes.M, PizzaSizes.L, PizzaSizes.XL]
}
*/
//const bbqPizza = new Pizza(Pizza)
//Array
/*
class PizzaCatalog {
	list: Pizza[] = [];

	constructor(list: Pizza[]) {
		this.list = list;
	}
}
*/
//const pizzaCatalog = new PizzaCatalog([bbqPizza]);
/*
const hawaiianPizza = new Pizza({
	name: "Hawaiian",
	slices: 6,
	toppings: [PizzaToppings.TOMATO],
	price: 12,
	cheescrust: true,
	sizes: [
		PizzaSizes.S,
		PizzaSizes.M,
		PizzaSizes.L,
		PizzaSizes.XL,
		PizzaSizes.XXL
	]
});
  
const vegiPizza = new Pizza({
	name: "Veggi",
	slices: 6,
	toppings: [PizzaToppings.TOMATO],
	price: 11,
	cheescrust: false,
	vegan: true,
	vegaterian: true,
	sizes: [
		PizzaSizes.S,
		PizzaSizes.M,
		PizzaSizes.L,
		PizzaSizes.XL,
		PizzaSizes.XXL
	]
});
  */  
//const pizzaCatalog = new PizzaCatalog([bbqPizza, hawaiianPizza, vegiPizza]);
//Loop through enums
// PizzaSizes enum
/*
export enum PizzaSizes {
    S,
    M,
    L,
    XL,
    XXL
  }
      
  export const PizzaSizeNames: string[] = Object.keys(PizzaSizes)
    .map(x => {
      if (new RegExp(/[0-9]/g).test(x)) {
        return PizzaSizes[x].toLowerCase();
      }
    })
    .filter(x => x !== undefined);
        
  export enum PizzaToppings {
    TOMATO, // value = 0
    BBQ, // value = 1
    NONE, // value = 2
    CREAM // value = 3
  }
      
  export const PizzaToppingNames: string[] =     Object.keys(PizzaToppings)
    .map(x => {
      if (new RegExp(/[0-9]/g).test(x)) {
        return PizzaToppings[x].toLowerCase();
      }
    })
    .filter(x => x !== undefined);
    */
   //Functions
   interface IPizzaPrice {
	size: string;
	price: number;
}
    
interface IPizza {
  name: string;
  slices: number;
  toppings: PizzaToppings[];
  price: number;
  cheesecrust: boolean;
  sizes: PizzaSizes[];
  vegan?: boolean;
  vegetarian?: boolean;
  prices?: IPizzaPrice[];
}

class Pizza {
  name: string = "";
  slices: number = 8;
  toppings: PizzaToppings[] = [];
  price: number = 0;
  cheesecrust: boolean = false;
  sizes: PizzaSizes[] = [];
  vegan?: boolean = false;
  vegetarian?: boolean = false;
  prices: IPizzaPrice[] = null;

  constructor(data: IPizza) {
    this.name = data.name;
    this.slices = data.slices;
    this.toppings = data.toppings;
    this.price = data.price;
    this.cheesecrust = data.cheesecrust;
    this.sizes = data.sizes;
    this.prices = this.getPizzaPrices();
    if (data.vegan) {
      this.vegan = data.vegan;
    }
    if (data.vegetarian) {
      this.vegetarian = data.vegetarian;
    }
}

private getPizzaPrices(): IPizzaPrice[] {
  return this.sizes.map((item, index) => {
    const addition = (this.price / 100) * 15 * index;
    console.log(this.price + addition);
    return {
      size: PizzaSizes[item],
      price: this.price + addition
    };
  });
}
}
